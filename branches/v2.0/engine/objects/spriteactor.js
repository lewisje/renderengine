
/**
 * The Render Engine
 *
 * SpriteActor object
 *
 * @author: Brett Fattori (brettf@renderengine.com)
 *
 * @author: $Author$
 * @version: $Revision$
 *
 * Copyright (c) 2008 Brett Fattori (brettf@renderengine.com)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

// The class this file defines and its required classes
R.Engine.define({
	"class": "R.objects.SpriteActor",
	"requires": [
		"R.components.Mover2D",
		"R.components.Sprite",
		"R.components.KeyboardInput",
		"R.engine.Object2D"
	]
});

/**
 * @class A <tt>SpriteActor</tt> is an actor object within a game, whose renderer
 * 		 is a 2D sprite.  It can have actions assigned to it, which are triggered
 * 		 by either a controlling player or generated by the program.
 * @param name {String} The name of the object
 * @extends Object2D
 * @constructor
 * @description Create a sprite actor
 */
R.objects.SpriteActor = function(){
	return R.engine.Object2D.extend({
	
		editing: false,
		sprite: null,
		scriptedActions: null,
		scriptedVars: null,
		
		constructor: function(name){
			this.base(name || "Actor");
			
			this.editing = false;
			this.scriptedActions = {};
			this.scriptedVars = {};
			
			// Add components to move and draw the player
			this.add(R.components.Sprite.create("draw"));
			this.add(R.components.Transform2D.create("move"));
		},
		
		/**
		 * After the actor is added to the context, allow it a chance to initialize.
		 * @private
		 */
		afterAdd: function(parent) {
			this.base(parent);
			this.callScriptedEvent("onInit", []);	
		},
		
		/**
		 * Destroy the object
		 */
		destroy: function() {
			this.callScriptedEvent("onDestroy", []);
			this.base();
		},
		
		/**
		 * Release the object back into the pool.
		 */
		release: function() {
			this.base();
			this.scriptedActions = null;
			this.scriptedVars = null;
		},
		
		getProperties: function(){
			var self = this;
			var prop = this.base(self);
			return $.extend(prop, {
				"Sprite": [!R.isUndefined(LevelEditor) ? function(){ return LevelEditor.getSpriteCanonicalName(self.sprite); } : function(){ return self.sprite.getName(); }, 
							  !R.isUndefined(LevelEditor) ? { "multi": true, 
							  											 "opts": LevelEditor.getSpriteOptions,
																		 "fn": function(s) { self.setSprite(LevelEditor.getSpriteForName(s)); }} : null, 
							  !R.isUndefined(LevelEditor) ? true : false ]
			});
		},

		/**
		 * Get the event associated with the action name.
		 * @param {Object} actionName
		 * @private
		 */
		getActorEvent: function(actionName) {
			return this.scriptedActions[actionName];
		},
		
		/**
		 * Set the event handler for the action name.
		 * @param {Object} actionName
		 * @param {Object} script
		 * @private
		 */
		setActorEvent: function(actionName, script) {
			this.scriptedActions[actionName] = { "script": script };
		},
		
		/**
		 * Calls a scripted event.  If the event handler hasn't been compiled yet, it
		 * will be compiled and then called in the scope of this actor.
		 * @param eventName {String} The name of the event to call
		 * @param args {Array} An array of arguments to pass to the event handler
		 * @private
		 */
		callScriptedEvent: function(eventName, args) {
			var evtScript = this.getActorEvent(eventName);
			if (!evtScript) {
				return;
			}
			
			// Is it compiled already?
			if (evtScript.compiled) {
				evtScript = evtScript.compiled;
			} else {
				// Compile the script
				evtScript = this.scriptedActions[eventName].compiled = new Function(this.scriptedActions[eventName].script);
			}
			
			evtScript.apply(this, args);
		},
		
		/**
		 * Get the value of the specified variable.
		 * @param {Object} varName
		 * @return {Object}
		 */
		getVariable: function(varName) {
			return this.scriptedVar[varName];
		},
		
		/**
		 * Set the value of the specified variable.
		 * @param {Object} varName
		 * @param {Object} value
		 */
		setVariable: function(varName, value) {
			this.scriptedVar[varName] = value;	
		},

		/**
		 * Get the events object for this actor.  The configuration is a
		 * collection of variables and scripts which are used to run the actor.  When
		 * scripts are called, the scope of the callback is the actor.  The following are
		 * included:
		 * <ul>
		 * <li>id - A unique Id used to identify this actor using the "getActor(id)" method in scripts.</li>
		 * <li>collisionMask - A bitmask which indicates what the actor will collide with.</li>
		 * <li>onInit() - Called when the actor is added to the level</li>
		 * <li>onDestroy() - Called when the actor is removed from the level</li>
		 * <li>onCollide(collisionData) - Called when the actor collides with another object.  The data
		 * 	contains information about the collision. See: {@link R.struct.CollisionData}</li>
		 * <li>onVisibility(state) - Called when the actor enters or leaves the frame.  The state
		 * 	will be <tt>true</tt> when visible (rendered).</li>
		 * <li>onBeforeUpdate(time) - Called before the actor is updated, providing the world time.</li>
		 * <li>onAfterUpdate(time) - Called after the actor is updated, providing the world time.</li>
		 * </ul>
		 * 
		 * @return {Object}
		 */
		getConfig: function(){
			// name : type (script|var)
			var self = this;
			var cfg = {};
			return $.extend(cfg, {
				"id": "var",
				"collisionMask": "var",
				"onInit": "script",
				"onDestroy": "script",
				"onCollide": "script",
				"onVisibility": "script",
				"onBeforeUpdate": "script",
				"onAfterUpdate": "script"
			});
		},

		
		/**
		 * Update the player within the rendering context.  This draws
		 * the shape to the context, after updating the transform of the
		 * object.  If the player is thrusting, draw the thrust flame
		 * under the ship.
		 *
		 * @param renderContext {RenderContext} The rendering context
		 * @param time {Number} The engine time in milliseconds
		 */
		update: function(renderContext, time){
			renderContext.pushTransform();

			this.callScriptedEvent("onBeforeUpdate", [time]);
			this.base(renderContext, time);
			this.callScriptedEvent("onAfterUpdate", [time]);
			
			if (this.editing) {
				renderContext.setLineStyle("white");
				renderContext.setLineWidth(2);
				var bbox = R.math.Rectangle2D.create(this.getSprite().getBoundingBox());
				var o = R.math.Point2D.create(this.getOrigin());
				o.neg();
				bbox.offset(o);
				renderContext.drawRectangle(bbox);
				bbox.destroy();
				o.destroy();
			}
			
			renderContext.popTransform();
		},
		
		setSprite: function(sprite){
			this.sprite = sprite;
			this.setBoundingBox(sprite.getBoundingBox());
			this.getComponent("draw").setSprite(sprite);
		},
		
		getSprite: function(){
			return this.sprite;
		},
		
		/**
		 * Get the position of the ship from the mover component.
		 * @type Point2D
		 */
		getPosition: function(){
			return this.getComponent("move").getPosition();
		},
		
		getRenderPosition: function(){
			return this.getComponent("move").getRenderPosition();
		},
		
		/**
		 * Set, or initialize, the position of the mover component
		 *
		 * @param point {Point2D} The position to draw the ship in the playfield
		 */
		setPosition: function(point){
			this.base(point);
			this.getComponent("move").setPosition(point);
		},
		
		getScale: function(){
			return this.getComponent("move").getScale();
		},
		
		getScaleX: function(){
			return this.getComponent("move").getScaleX();
		},
		
		getScaleY: function(){
			return this.getComponent("move").getScaleY();
		},
		
		setScale: function(x, y){
			y = y || x;
			this.getComponent("move").setScale(x, y);
		},
		
		getRotation: function(){
			return this.getComponent("move").getRotation();
		},
		
		setRotation: function(r){
			this.getComponent("move").setRotation(r);
		},
		
		setEditing: function(state){
			this.editing = state;
		},
		
		isEditable: function(){
			return true;
		}
		
	}, { /** @scope R.objects.SpriteActor.prototype */
		/**
		 * Get the class name of this object
		 * @return The string <tt>R.objects.SpriteActor</tt>
		 * @type String
		 */
		getClassName: function(){
			return "R.objects.SpriteActor";
		}
	});
	
}