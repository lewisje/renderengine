#summary How the engine fits into game development

=Game Development with The Render Engine=

I realize that some people will question my motives, considering that [http://www.adobe.com/products/flash/ Adobe Flash] is available and offers more capability than Javascript does (at this point), however, the entry fee is fairly steep for most individuals.  The Render Engine is targeted at those individuals who would like to create games but who don't have access to Flash, don't want to pirate Flash and risk their future, or don't have the skills necessary to create games with it.  

That being said, _game programming isn't easy_!  While The Render Engine's goal is to relieve you of some of the burden of engine development, it will take some hard work to build an understanding and begin to use it efficiently.  A friend once said to me that "not every game idea is a great idea," which is very true.  However, there are some ideas that turn out to be the next great game.  With the engine being open source, and anything created with it as well, you will be provided with the tools and examples that might help you to make the next Tetris.

The Render Engine includes an ever growing library of examples that use the engine, from simple vector graphics, to 2D sprite demos.  The examples aren't meant to be full games, but will hopefully be a place where you can get started.  The concepts and structure will give you an understanding of the engine and how it works.

The HostComponents system in the game simplifies the overall development of game objects since it is possible to reuse these components again and again.  You interact with these components using a common set of interface calls, and most of the work is handled for you.  Ideally, you can develop for one render context, and then swap it with another and things should still work.  This is because a render context will only support what it can handle.  Operations not supported by a particular render context will do nothing -- not break the game.