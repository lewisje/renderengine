<project name="The Render Engine" default="engine.dist" basedir=".">
   <property file="build.properties"/>
 
   <property name="app.name" value="renderengine"/>
   <property name="app.version" value="beta1"/>
	<property name="version.name" value="beta 1.0.0"/>
   <property name="build.date" value="01/23/2009"/>
   <property name="dist.home" value="${basedir}/dist_${app.version}"/>
   <property name="engine.src" value="${basedir}/engine/build"  />
   <property name="make.dir" value="${basedir}/make"/>
   <property name="compressor.jar" value="${make.dir}/yuicompressor-2.4.2.jar"/>

  
   <!-- Locations of distributed files -->
   <property name="min.home" value="${dist.home}/min-js"/>
   <property name="full.home" value="${dist.home}/full"/>

	<!-- Demos and tools won't be copied unless specified in build.properties -->
	<property name="demo.set" value="NO_COPY"/>
	<property name="tool.set" value="NO_COPY"/>

	<!-- Dumpt the system date (this is for Windows) -->
	<exec executable="cmd.exe" outputproperty="build.date" >  
		<arg line="/c"/>
		<arg line="date.exe"/>
		<arg line="/T"/>  
	</exec>
	<!--
	<propertyregex property="build.date" input="${builddate.out}" select="\1">  
		<regexp pattern="\w+ ((\d+\/?){3})"/>  
	</propertyregex>
	-->

  
   <!-- ======================== ENGINE DISTRIBUTION TARGETS ======================= -->
   <target name="engine.dist" depends="engine.clean,engine.zip" description="Creates the full and compressed distribution zip files for The Render Engine"/>
   <target name="engine.make.min" depends="engine.clean,engine.min" description="Creates the compressed distribution directory for The Render Engine"/>
   <target name="engine.make.full" depends="engine.clean,engine.full" description="Creates the full distribution directory for The Render Engine"/>
   <target name="engine.make.all" depends="engine.clean,engine.full,engine.min" description="Creates the full and compressed distribution directories for The Render Engine"/>


   <!-- =========================== ENGINE BUILD TARGET ========================== -->
	<target name="engine.build" description="Main engine build, concatenates source files and replaces @ENGINE_VERSION">
		<echo message="Building ${engine.file}" />
		<concat destfile="${engine.file}">
			<fileset dir="${make.dir}" includes="intro.js" />
			<fileset dir="${engine.src}" includes="engine.console.js" />
			<fileset dir="${engine.src}" includes="engine.support.js" />
			<fileset dir="${engine.src}" includes="engine.linker.js" />
			<fileset dir="${engine.src}" includes="engine.main.js" />
			<fileset dir="${engine.src}" includes="engine.script.js" />
			<fileset dir="${engine.src}" includes="engine.init.js" />
		</concat>
		<replaceregexp match="@BUILD_VERSION" replace="${build.version}" flags="g" byline="true" file="${engine.file}" />
		<replaceregexp match="@BUILD_DATE" replace="${build.date}" flags="g" byline="true" file="${engine.file}" />
		<replaceregexp match="@ENGINE_VERSION" replace="${build.version}" flags="g" byline="true" file="${engine.file}" />
		<echo message="${engine.file} built." />
	</target>
  
	<target name="engine.runtime" description="Build a single file compilation of the engine for testing">
		<!-- Create the directory -->
		<antcall target="engine.build">
			<param name="engine.file" value="${basedir}/engine/runtime/engine.js"/>
		</antcall>
	</target>
  
  
   <!-- =============================== ENGINE CLEAN ========================== -->
   <target name="engine.clean" description="Prepares for creation of distribution">
     
      <!-- Remove the target directory of the build -->
      <delete quiet="true" includeemptydirs="true">
         <fileset dir="${dist.home}" includes="**/*"/>
      </delete>
  
      <!-- Create the distribution home directory -->
      <mkdir dir="${dist.home}"/>
  
   </target>
  
 
   <!-- ============================= ENGINE ZIP ============================ -->
   <target name="engine.zip" depends="engine.min,engine.full" description="Create and zip the engine distributions">
      <zip basedir="${min.home}" destfile="${dist.home}/${app.name}_${app.version}-min.zip"/>
      <zip basedir="${full.home}" destfile="${dist.home}/${app.name}_${app.version}.zip"/>
   </target>
  
  
   <!-- ======================== DIRECTORY STRUCTURE FOR DIST ========================= -->
   <target name="makedirs" description="Create the directory structure">
 
      <mkdir dir="${build.home}"/>
 
      <mkdir dir="${build.home}/engine"/>
      <mkdir dir="${build.home}/components"/>
      <mkdir dir="${build.home}/rendercontexts"/>
      <mkdir dir="${build.home}/resourceloaders"/>
      <mkdir dir="${build.home}/spatial"/>
      <mkdir dir="${build.home}/textrender"/>
      <mkdir dir="${build.home}/css"/>
      <mkdir dir="${build.home}/fonts"/>
      <mkdir dir="${build.home}/libs"/>
      <mkdir dir="${build.home}/demos"/>
      <mkdir dir="${build.home}/tools"/>
      <mkdir dir="${build.home}/setup"/>
           
   </target>
 
 
   <!-- ======================== COPY UNCOMPRESSED & PRECOMPRESSED FILES ========================= -->
   <target name="basecopy" description="Copy the uncompressed files">
 
      <!-- Copy the engine CSS -->     
      <copy todir="${build.home}/css">
         <fileset dir="${basedir}/css">
            <include name="*.css"/>
            <include name="*.png"/>
            <include name="*.jpg"/>
            <include name="*.gif"/>
         </fileset>
      </copy>
  
      <!-- Copy the font description files and images -->     
      <copy todir="${build.home}/fonts">
         <fileset dir="${basedir}/fonts">
            <include name="*.js"/>
            <include name="*.png"/>
         </fileset>
      </copy>
 
      <!-- Copy the server setup files -->     
      <copy todir="${build.home}/setup">
         <fileset dir="${basedir}/setup">
            <include name="**/*.*"/>
            <exclude name="**/.svn"/>
         </fileset>
      </copy>

      <!-- Copy the supporting libraries -->     
      <copy todir="${build.home}/libs">
         <fileset dir="${basedir}/libs">
            <include name="base.js"/>
            <include name="json2.js"/>
            <include name="jquery-1.2.6.js"/>
            <include name="jquery.ext.engine.js"/>
            <include name="soundmanager2.js"/>
            <include name="soundmanager2.swf"/>
            <include name="soundmanager2_flash9.swf"/>
            <include name="sylvester.js"/>
         </fileset>
      </copy>
           
   </target>
 
 
   <!-- ======================= COPY DEMOS & TOOLS =============================== -->
   <target name="copydemos" description="Copy demonstrations and tools">

      <!-- Copy the demonstrations -->
      <copy todir="${build.home}/demos">
         <fileset dir="${basedir}/demos" includes="${demo.set}">
         	<exclude name="**/.svn"/>
         </fileset>
      </copy>
 
      <!-- Copy the tools -->
      <copy todir="${build.home}/tools">
         <fileset dir="${basedir}/tools" includes="${tool.set}">
         	<exclude name="**/.svn"/>
         </fileset>
      </copy>
  
   </target>  

   <!-- ======================= COPY LICENSES & DOCS =============================== -->
	<target name="licenses" description="Copy licenses and docs">
		
      <!-- Copy the license and readme files -->
      <copy todir="${build.home}">
         <fileset file="${basedir}/MIT_LICENSE.txt"/>
         <fileset file="${basedir}/README.txt"/>
      </copy>
		
		<replaceregexp match="@BUILD_VERSION" replace="${build.version}" flags="g" byline="true" file="${build.home}/README.txt" />
		<replaceregexp match="@BUILD_DATE" replace="${build.date}" flags="g" byline="true" file="${build.home}/README.txt" />
		
	</target>  
  
   <!-- ======================= ENGINE FULL SOURCE DISTIBUTION ========================= -->
   <target name="engine.full" description="Create the full source distribution of the engine">
 
      <!-- ### START ### Pre-compilation tasks -->
      <antcall target="makedirs">
         <param name="build.home" value="${full.home}"/>
      </antcall>
 
      <antcall target="basecopy">
         <param name="build.home" value="${full.home}"/>
         <param name="source.flag" value=".src"/>
      </antcall>
 
      <antcall target="copydemos">
         <param name="build.home" value="${full.home}"/>
      </antcall>

      <antcall target="licenses">
         <param name="build.home" value="${full.home}"/>
      </antcall>
   
   	<antcall target="engine.build">
			<param name="engine.file" value="${full.home}/engine/engine.js" />
   	</antcall>
      <!-- ### FINISH ### Pre-compilation tasks -->
 
      <!-- Copy the engine files -->     
      <copy todir="${full.home}/engine">
         <fileset dir="${basedir}/engine">
            <include name="*.js"/>
         </fileset>
      </copy>
 
      <!-- Copy the object components -->     
      <copy todir="${full.home}/components">
         <fileset dir="${basedir}/components">
            <include name="*.js"/>
         </fileset>
      </copy>
 
      <!-- Copy the render contexts -->     
      <copy todir="${full.home}/rendercontexts">
         <fileset dir="${basedir}/rendercontexts">
            <include name="*.js"/>
         </fileset>
      </copy>
 
      <!-- Copy the resource loaders -->     
      <copy todir="${full.home}/resourceloaders">
         <fileset dir="${basedir}/resourceloaders">
            <include name="*.js"/>
         </fileset>
      </copy>
 
      <!-- Copy the collision models -->     
      <copy todir="${full.home}/spatial">
         <fileset dir="${basedir}/spatial">
            <include name="*.js"/>
         </fileset>
      </copy>

      <!-- Copy the text rendering -->     
      <copy todir="${full.home}/textrender">
         <fileset dir="${basedir}/textrender">
            <include name="*.js"/>
         </fileset>
      </copy>
 
   </target>
  
	<target name="engine.compress" description="Compress a source file into a destination file">
	
      <java classname="com.yahoo.platform.yui.compressor.YUICompressor">
         <arg line="--nomunge -o ${min.home}/${input.file} ${basedir}/${input.file}"/>
         <classpath>
            <pathelement path="${compressor.jar}"/>
         </classpath>
      </java>
	
	</target>

  
   <!-- ================== ENGINE MINIFIED/COMPRESSED DISTRIBUTION ===================== -->
   <target name="engine.min" description="Create the minified/compressed distribution of the engine">
  
      <!-- ### START ### Pre-compilation tasks -->
      <antcall target="makedirs">
         <param name="build.home" value="${min.home}"/>
      </antcall>
 
      <antcall target="basecopy">
         <param name="build.home" value="${min.home}"/>
         <param name="source.flag" value=""/>
      </antcall>
 
      <antcall target="copydemos">
         <param name="build.home" value="${min.home}"/>
      </antcall>

      <antcall target="licenses">
         <param name="build.home" value="${min.home}"/>
      </antcall>

   	<antcall target="engine.build">
			<param name="engine.file" value="${make.dir}/temp_engine.js" />
   	</antcall>
      <!-- ### FINISH ### Pre-compilation tasks -->
 
 
      <!-- Compress and copy the engine files -->
      <echo message="Compressing engine..."/>

		<!-- Get the engine out out the way -->
      <java classname="com.yahoo.platform.yui.compressor.YUICompressor">
         <arg line="--nomunge -o ${min.home}/engine/engine.js ${make.dir}/temp_engine.js"/>
         <classpath>
            <pathelement path="${compressor.jar}"/>
         </classpath>
      </java>
		<delete file="${make.dir}/temp_engine.js"/>

		<antcall target="engine.compress">
			<param name="input.file" value="engine/engine.baseobject.js"/>
		</antcall>

		<antcall target="engine.compress">
			<param name="input.file" value="engine/engine.container.js"/>
		</antcall>

		<antcall target="engine.compress">
			<param name="input.file" value="engine/engine.events.js"/>
		</antcall>

		<antcall target="engine.compress">
			<param name="input.file" value="engine/engine.fnv1hash.js"/>
		</antcall>

		<antcall target="engine.compress">
			<param name="input.file" value="engine/engine.game.js"/>
		</antcall>

		<antcall target="engine.compress">
			<param name="input.file" value="engine/engine.hostobject.js"/>
		</antcall>

		<antcall target="engine.compress">
			<param name="input.file" value="engine/engine.math2d.js"/>
		</antcall>

		<antcall target="engine.compress">
			<param name="input.file" value="engine/engine.object2d.js"/>
		</antcall>

		<antcall target="engine.compress">
			<param name="input.file" value="engine/engine.particles.js"/>
		</antcall>

		<antcall target="engine.compress">
			<param name="input.file" value="engine/engine.pooledobject.js"/>
		</antcall>

		<antcall target="engine.compress">
			<param name="input.file" value="engine/engine.rendercontext.js"/>
		</antcall>

		<antcall target="engine.compress">
			<param name="input.file" value="engine/engine.resourceloader.js"/>
		</antcall>

		<antcall target="engine.compress">
			<param name="input.file" value="engine/engine.spatialcontainer.js"/>
		</antcall>

		<antcall target="engine.compress">
			<param name="input.file" value="engine/engine.timers.js"/>
		</antcall>

 
      <!-- Compress and copy the object components -->     
      <echo message="Compressing components..."/>

		<antcall target="engine.compress">
			<param name="input.file" value="components/component.base.js"/>
		</antcall>

		<antcall target="engine.compress">
			<param name="input.file" value="components/component.boxcollider.js"/>
		</antcall>

		<antcall target="engine.compress">
			<param name="input.file" value="components/component.circlecollider.js"/>
		</antcall>

		<antcall target="engine.compress">
			<param name="input.file" value="components/component.collider.js"/>
		</antcall>

		<antcall target="engine.compress">
			<param name="input.file" value="components/component.host.js"/>
		</antcall>

		<antcall target="engine.compress">
			<param name="input.file" value="components/component.input.js"/>
		</antcall>

		<antcall target="engine.compress">
			<param name="input.file" value="components/component.keyboardinput.js"/>
		</antcall>

		<antcall target="engine.compress">
			<param name="input.file" value="components/component.logic.js"/>
		</antcall>

		<antcall target="engine.compress">
			<param name="input.file" value="components/component.mouseinput.js"/>
		</antcall>

		<antcall target="engine.compress">
			<param name="input.file" value="components/component.mover2d.js"/>
		</antcall>

		<antcall target="engine.compress">
			<param name="input.file" value="components/component.notifier.js"/>
		</antcall>

		<antcall target="engine.compress">
			<param name="input.file" value="components/component.render.js"/>
		</antcall>

		<antcall target="engine.compress">
			<param name="input.file" value="components/component.sprite.js"/>
		</antcall>

		<antcall target="engine.compress">
			<param name="input.file" value="components/component.transform2d.js"/>
		</antcall>

		<antcall target="engine.compress">
			<param name="input.file" value="components/component.vector2d.js"/>
		</antcall>

		<antcall target="engine.compress">
			<param name="input.file" value="components/component.wiimoteinput.js"/>
		</antcall>
 
 
      <!-- Compress and copy the render contexts -->     
      <echo message="Compressing rendercontexts..."/>

		<antcall target="engine.compress">
			<param name="input.file" value="rendercontexts/context.canvascontext.js"/>
		</antcall>

		<antcall target="engine.compress">
			<param name="input.file" value="rendercontexts/context.documentcontext.js"/>
		</antcall>

		<antcall target="engine.compress">
			<param name="input.file" value="rendercontexts/context.htmlelement.js"/>
		</antcall>

		<antcall target="engine.compress">
			<param name="input.file" value="rendercontexts/context.render2d.js"/>
		</antcall>

		<antcall target="engine.compress">
			<param name="input.file" value="rendercontexts/context.scrollingbackground.js"/>
		</antcall>

		<antcall target="engine.compress">
			<param name="input.file" value="rendercontexts/context.svgcontext.js"/>
		</antcall>

 
      <!-- Compress and copy the resource loaders -->     
      <echo message="Compressing resourceloaders..."/>

		<antcall target="engine.compress">
			<param name="input.file" value="resourceloaders/loader.bitmapfont.js"/>
		</antcall>

		<antcall target="engine.compress">
			<param name="input.file" value="resourceloaders/loader.image.js"/>
		</antcall>

		<antcall target="engine.compress">
			<param name="input.file" value="resourceloaders/loader.level.js"/>
		</antcall>

		<antcall target="engine.compress">
			<param name="input.file" value="resourceloaders/loader.object.js"/>
		</antcall>

		<antcall target="engine.compress">
			<param name="input.file" value="resourceloaders/loader.remote.js"/>
		</antcall>

		<antcall target="engine.compress">
			<param name="input.file" value="resourceloaders/loader.sound.js"/>
		</antcall>

		<antcall target="engine.compress">
			<param name="input.file" value="resourceloaders/loader.sprite.js"/>
		</antcall>

		<antcall target="engine.compress">
			<param name="input.file" value="resourceloaders/loader.xml.js"/>
		</antcall>
 
 
      <!-- Copy the collision models -->     
      <echo message="Compressing spatial..."/>

		<antcall target="engine.compress">
			<param name="input.file" value="spatial/container.quadtree.js"/>
		</antcall>

		<antcall target="engine.compress">
			<param name="input.file" value="spatial/container.spatialgrid.js"/>
		</antcall>
 
 
      <!-- Copy the text rendering -->     
      <echo message="Compressing textrender..."/>

		<antcall target="engine.compress">
			<param name="input.file" value="textrender/text.abstractrender.js"/>
		</antcall>

		<antcall target="engine.compress">
			<param name="input.file" value="textrender/text.bitmap.js"/>
		</antcall>

		<antcall target="engine.compress">
			<param name="input.file" value="textrender/text.renderer.js"/>
		</antcall>

		<antcall target="engine.compress">
			<param name="input.file" value="textrender/text.vector.js"/>
		</antcall>
  
   </target>
  
</project>


